{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/blogs';\nexport const getAllBlogs = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching properties:', error);\n    throw error;\n  }\n};\nexport const addBlog = async (blog, token) => {\n  try {\n    const response = await axios.post(API_URL, blog, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding blog:', error);\n    throw error;\n  }\n};\nexport const getUserBlogs = async (userId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/user/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user blogs:', error);\n    throw error;\n  }\n};\nexport const deleteBlog = async (blogId, token) => {\n  try {\n    await axios.delete(`${API_URL}/${blogId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  } catch (error) {\n    console.error('Error deleting blog:', error);\n    throw error;\n  }\n};\nexport const getBlogById = async blogId => {\n  try {\n    const response = await axios.get(`${API_URL}/${blogId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching blog by ID:', error);\n    throw error;\n  }\n};\nexport const addToFavorites = async (blogId, token) => {\n  try {\n    const response = await axios.post('http://localhost:5000/favorites', {\n      blogId\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding to favorites:', error);\n    throw error;\n  }\n};\nexport const getUserFavorites = async token => {\n  try {\n    const response = await axios.get('http://localhost:5000/favorites', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user favorites:', error);\n    throw error;\n  }\n};\nexport const removeFromFavorites = async (blogId, token) => {\n  try {\n    const response = await fetch(`http://localhost:5000/favorites/${blogId}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message);\n    }\n  } catch (error) {\n    console.error('Error removing from favorites:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getAllBlogs","response","get","data","error","console","addBlog","blog","token","post","headers","Authorization","getUserBlogs","userId","deleteBlog","blogId","delete","getBlogById","addToFavorites","getUserFavorites","removeFromFavorites","fetch","method","ok","errorData","json","Error","message"],"sources":["/home/surya/Desktop/FullStack-Projects/blog-it/client/src/services/blogService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/blogs';\n\nexport const getAllBlogs = async () => {\n    try {\n        const response = await axios.get(API_URL);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching properties:', error);\n        throw error;\n    }\n};\n\nexport const addBlog = async (blog, token) => {\n    try {\n        const response = await axios.post(API_URL, blog, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error adding blog:', error);\n        throw error;\n    }\n};\n\nexport const getUserBlogs = async (userId, token) => {\n    try {\n        const response = await axios.get(`${API_URL}/user/${userId}`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching user blogs:', error);\n        throw error;\n    }\n};\n\nexport const deleteBlog = async (blogId, token) => {\n    try {\n        await axios.delete(`${API_URL}/${blogId}`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n    } catch (error) {\n        console.error('Error deleting blog:', error);\n        throw error;\n    }\n};\n\nexport const getBlogById = async (blogId) => {\n    try {\n        const response = await axios.get(`${API_URL}/${blogId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching blog by ID:', error);\n        throw error;\n    }\n};\n\nexport const addToFavorites = async (blogId, token) => {\n    try {\n        const response = await axios.post('http://localhost:5000/favorites', { blogId }, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error adding to favorites:', error);\n        throw error;\n    }\n};\n\n\n\nexport const getUserFavorites = async (token) => {\n    try {\n        const response = await axios.get('http://localhost:5000/favorites', {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching user favorites:', error);\n        throw error;\n    }\n};\n\n\nexport const removeFromFavorites = async (blogId, token) => {\n    try {\n        const response = await fetch(`http://localhost:5000/favorites/${blogId}`, {\n            method: 'DELETE',\n            headers: {\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message);\n        }\n    } catch (error) {\n        console.error('Error removing from favorites:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,6BAA6B;AAE7C,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;IACzC,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,OAAO,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;EAC1C,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACW,IAAI,CAACV,OAAO,EAAEQ,IAAI,EAAE;MAC7CG,OAAO,EAAE;QACL,cAAc,EAAE,qBAAqB;QACrCC,aAAa,EAAE,UAAUH,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEL,KAAK,KAAK;EACjD,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,SAASc,MAAM,EAAE,EAAE;MAC1DH,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUH,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMU,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEP,KAAK,KAAK;EAC/C,IAAI;IACA,MAAMV,KAAK,CAACkB,MAAM,CAAC,GAAGjB,OAAO,IAAIgB,MAAM,EAAE,EAAE;MACvCL,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUH,KAAK;MAClC;IACJ,CAAC,CAAC;EACN,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMa,WAAW,GAAG,MAAOF,MAAM,IAAK;EACzC,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,IAAIgB,MAAM,EAAE,CAAC;IACxD,OAAOd,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMc,cAAc,GAAG,MAAAA,CAAOH,MAAM,EAAEP,KAAK,KAAK;EACnD,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACW,IAAI,CAAC,iCAAiC,EAAE;MAAEM;IAAO,CAAC,EAAE;MAC7EL,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUH,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;AAID,OAAO,MAAMe,gBAAgB,GAAG,MAAOX,KAAK,IAAK;EAC7C,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,iCAAiC,EAAE;MAChEQ,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUH,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC;AAGD,OAAO,MAAMgB,mBAAmB,GAAG,MAAAA,CAAOL,MAAM,EAAEP,KAAK,KAAK;EACxD,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMoB,KAAK,CAAC,mCAAmCN,MAAM,EAAE,EAAE;MACtEO,MAAM,EAAE,QAAQ;MAChBZ,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUH,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,IAAI,CAACP,QAAQ,CAACsB,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMvB,QAAQ,CAACwB,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,CAAC;IACtC;EACJ,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}